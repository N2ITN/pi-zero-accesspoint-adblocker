sudo create_ap -n wlan0 zer0 adzapper &
sudo pkill dnsmasq
sleep 10
export WLAN_ADDR=`ifconfig wlan0 | grep 'inet addr' | awk '{print $2}' | sed -e 's/:/\n/' | grep 192`
rm resolv.conf; touch resolv.conf && echo "$WLAN_ADDR ad-zero.io" >> resolv.conf && chmod 644 resolv.conf
cd ~/zer0
touch resolv.conf && chmod 644 resolv.conf
sudo mv resolv.conf /etc/resolv.conf
sudo python3 ~/fakedns/fakedns.py $WLAN_ADDR
sudo python webserver.py &



# on exit
rm resolv.conf; touch resolv.conf  && chmod 644 resolv.conf
sudo mv resolv.conf /etc/resolv.conf

# os.environ['WLAN_ADDR']



goal: recognize ad-zero.ninja as locally hosted login page

sudo pkill -9 dnsmasq && sudo dnsmasq --no-daemon --log-queries


tried didnt work to varying degrees:
    https://github.com/chokepoint/pytinydns
    https://unix.stackexchange.com/questions/16890/how-to-make-a-machine-accessible-from-the-lan-using-its-hostname
    https://blog.heckel.xyz/2013/07/18/how-to-dns-spoofing-with-a-simple-dns-server-using-dnsmasq/
    https://stackoverflow.com/questions/23562501/how-to-set-up-a-local-dns-server-in-python

have not tried:
https://pypi.python.org/pypi/minidns
https://github.com/pathes/fakedns


#export WLAN_PORT=:8080
#export WEB_SERVER="$WLAN_ADDR$WLAN_PORT"
# cd ~/pytiny*
# sudo pkill dnsmasq
# sudo python pytinydns.py -c pytinydns.conf -l pytinydns.host -n 